{Application 'HandiSSR' logic file generated by CSPro}
PROC GLOBAL

array string codesString(300);
array string labels(300);
file pffFile, tempFile;

string StartDateKey = "StartDate", EndDateKey="EndDate";
numeric StartDateValue, EndDateValue, TODAY, previousButton=notappl;

// Launch household questionnaire data entry application
function launchHouseholdDataEntry(newHousehold)
    string pffFilename = "../Household/household.pff";
    
    if setfile(pffFile,pffFilename,create) = 0 then
    	errmsg("Echec à l'ouverture %s", pffFilename);
	endif;
	
    filewrite(pffFile,"[Run Information]");
    filewrite(pffFile,"Version=CSPro 7.0");
    filewrite(pffFile,"AppType=Entry");
    filewrite(pffFile,"\n");

    filewrite(pffFile,"[DataEntryInit]");
	// Use modify mode if the case already exists in the household
	// data file, otherwise use add mode.
	if newHousehold = 1 then
		filewrite(pffFile,"StartMode=add");
	else
		//errmsg("%s",CHOOSE_HOUSEHOLD);
		//filewrite(pffFile,"StartMode=modify;%s",CHOOSE_HOUSEHOLD);
		string mode;
		open(HOUSEHOLD_DICT);
		if loadcase(HOUSEHOLD_DICT, CHOOSE_HOUSEHOLD) = 1 then
			mode = "modify";
		else
			mode = "add";
		endif;
		close(HOUSEHOLD_DICT);
		filewrite(pffFile,"StartMode=%s;%s",mode, CHOOSE_HOUSEHOLD);
	endif;
	
	filewrite(pffFile,"AutoAdd=NO");
	//filewrite(pffFile,"FullScreen=YES");
	filewrite(pffFile,"Lock=Delete,Verify,Stats");//,CaseListing);
	filewrite(pffFile,"Interactive=Ask");
	filewrite(pffFile,"Language=FRANCAIS");
	filewrite(pffFile,"ShowInApplicationListing=Never");
	filewrite(pffFile,"\n");
	
    filewrite(pffFile,"[Files]");
    filewrite(pffFile,"Application=../Household/household.ent");
    filewrite(pffFile,"InputData=../Household/Data/household.csdb|CSPRODB");
    filewrite(pffFile,"\n");

	filewrite(pffFile,"[UserFiles]");
	//filewrite(pffFile,"TEMPFILE=%s",""); //Demande la creation du fichier temporaire
	filewrite(pffFile,"TEMPFILE=../household/report.txt");
	filewrite(pffFile,"\n");

    filewrite(pffFile,"[Parameters]");
    filewrite(pffFile,"STARTDATE=%d",TODAY);
    filewrite(pffFile,"ENDDATE=%d",EndDateValue);
    filewrite(pffFile,"ENDTIME=%s",sysparm("ENDTIME"));
    filewrite(pffFile,"STARTTIME=%s",sysparm("STARTTIME"));
    if newHousehold<>1 and CHOOSE_HOUSEHOLD <> "" then
	    filewrite(pffFile,"COMMUNE=%s", CHOOSE_HOUSEHOLD[1:1]);
	    filewrite(pffFile,"ZONE=%s", CHOOSE_HOUSEHOLD[2:2]);
	    filewrite(pffFile,"COLLINE=%s", CHOOSE_HOUSEHOLD[4:2]);
	    filewrite(pffFile,"ZD=%s", CHOOSE_HOUSEHOLD[6:3]);
	    filewrite(pffFile,"STRUCTURE=%s", CHOOSE_HOUSEHOLD[9:3]);
	    filewrite(pffFile,"NUM_MENAGE=%s", CHOOSE_HOUSEHOLD[12:3]);
    endif;
    //filewrite(pffFile,"AGENT=%d", LOGIN);
    close(pffFile);
    
    execpff(pffFilename, stop);
end;

//Launch individual questionnaire data entry application
// newRecord <> 0 => Nouvel enregistrement
// individualType=1 => PH et individualType=2 => PT
function launchIndividualDataEntry(newRecord,individualType)
	string pffFilename, mode, ident="";
	numeric individualForm = 0 ;
	
	close(INDIVIDUAL_DICT);
	close(ELIGIBILITE_DICT);
	
	if newRecord = 1 then
		mode = "add";
		pffFilename = "../Individual/eligibilite.pff";
	else
		if individualType = 1 then
			ident = CHOOSE_PH;
		else
			ident = CHOOSE_PT;
		endif;
		if loadcase(INDIVIDUAL_DICT,ident)=1 then
			mode = "modify";
			pffFilename = "../Individual/individual.pff";
			individualForm = 1;
		else
			if loadcase(ELIGIBILITE_DICT,ident)=1 then
				if STATUT_HANDICAP in 3:4 then
					mode = "modify";
					pffFilename = "../Individual/eligibilite.pff";
				else 
					mode = "add";
					pffFilename = "../Individual/individual.pff";
					individualForm = 1;
				endif;
			else // cas improbable si donnees convenable chargees
				{mode = "add";
				pffFilename = "../Individual/eligibilite.pff";}
				errmsg("[HandiSSR] Error initiating  launchIndividualDataEntry function");
				stop(0);
			endif;
		endif;
	endif;
	close(ELIGIBILITE_DICT);
	close(INDIVIDUAL_DICT);
	 
    if setfile(pffFile,pffFilename,create) = 0 then
    	errmsg("Echec à l'ouverture %s", pffFilename);
	endif;
	
    filewrite(pffFile,"[Run Information]");
    filewrite(pffFile,"Version=CSPro 7.0");
    filewrite(pffFile,"AppType=Entry");
    filewrite(pffFile,"\n");

    filewrite(pffFile,"[DataEntryInit]");
	filewrite(pffFile,"StartMode=%s;%s",mode, ident);
	filewrite(pffFile,"AutoAdd=NO");
	filewrite(pffFile,"Lock=Delete,Verify,Stats");
	filewrite(pffFile,"Interactive=Ask");
	filewrite(pffFile,"Language=FRANCAIS");
	filewrite(pffFile,"ShowInApplicationListing=Never");
	filewrite(pffFile,"\n");
	
    if individualForm <> 1 then
   		filewrite(pffFile,"[Files]");
    	filewrite(pffFile,"Application=../Individual/eligibilite.ent");
    	filewrite(pffFile,"InputData=../Individual/Data/eligibilite.csdb|CSPRODB");
    	filewrite(pffFile,"\n");
    	
    	filewrite(pffFile,"[ExternalFiles]");
    	filewrite(pffFile,"HOUSEHOLD_DICT=..\Household\Data\household.csdb|CSPRODB");
    else
    	filewrite(pffFile,"[Files]");
    	filewrite(pffFile,"Application=../Individual/individual.ent");
    	filewrite(pffFile,"InputData=../Individual/Data/individual.csdb|CSPRODB");
    	filewrite(pffFile,"\n");
    	
    	filewrite(pffFile,"[ExternalFiles]");
    	filewrite(pffFile,"ELIGIBILITE_DICT=.\Data\eligibilite.csdb|CSPRODB");
		filewrite(pffFile,"HOUSEHOLD_DICT=..\Household\Data\household.csdb|CSPRODB");
    endif;
    
    filewrite(pffFile,"[Parameters]");
    filewrite(pffFile,"STARTDATE=%d",TODAY);
    filewrite(pffFile,"ENDDATE=%d",EndDateValue);
    filewrite(pffFile,"ENDTIME=%s",sysparm("ENDTIME"));
    filewrite(pffFile,"STARTTIME=%s",sysparm("STARTTIME"));
    if newRecord<>1 and ident <> "" then
	    filewrite(pffFile,"COMMUNE=%s", ident[1:1]);
	    filewrite(pffFile,"ZONE=%s", ident[2:2]);
	    filewrite(pffFile,"COLLINE=%s", ident[4:2]);
	    filewrite(pffFile,"ZD=%s", ident[6:3]);
	    filewrite(pffFile,"STRUCTURE=%s", ident[9:3]);
	    filewrite(pffFile,"NUM_MENAGE=%s", ident[12:3]);
	    filewrite(pffFile,"NUM_INDIVIDU=%s", ident[15:2]);
    endif;
    //filewrite(pffFile,"AGENT=%d", LOGIN);
    filewrite(pffFile,"CATEGORIE=%d",individualType);
    
    if newRecord=1 and individualType = 2 then
    	filewrite(pffFile,"CASEID=%s",CHOOSE_PH);
    endif;
    
    close(pffFile);  
    execpff(pffFilename, stop);
end;


// Construit une liste dynamique de choix des ménages disponibles dans la base de données
function loadHouseholdList()
	numeric nextEntry = 1;

	// Loop through all cases in listing file
	// to build dynamic value set.
	open(HOUSEHOLD_DICT);
	locate(HOUSEHOLD_DICT,>=,"");
	while loadcase(HOUSEHOLD_DICT) do
	   // On ne charge pas les ménages ayant refusés d'être enquêté
		// On ne charge que les ménages que l'agent a eu à enquêter ou ceux qui lui ont été assigné
		// Pour le superviseur c'est toute la liste qui est chargé en prévision du fait que lui 
		// même peut collecter les données ou les utiliser pour affecter des tâches à un agent
		
		if not(H_STATUT in 4) and (LOGIN=0 or LOGIN=AGENT or LOGIN=AGENT_ASSIGNE) then
			
			codesString(nextEntry)=maketext("%d%02d%02d%03d%03d%03d",COMMUNE,ZONE,COLLINE,ZD,STRUCTURE,NUM_MENAGE);
		
			// Get the interview status for the corresponding household
			// from the household questionnaire data file
			string status = getlabel(H_STATUT,H_STATUT);
		    string headName = "";
		    do numeric j=1 while j<=count(HOUSEHOLD_DICT.MEMBRE)
		    	if Q113(j)=1 then
		    		headName = Q110(j);
		    		break;
		    	endif;
		    enddo;
		    // Labels have househould number and name of head
		    string caseLabel = maketext("%d-%02d-%02d-%03d-%03d-%03d: %s",
										 COMMUNE, ZONE, COLLINE, ZD, STRUCTURE, NUM_MENAGE, strip(headName));
		    labels(nextEntry) = maketext("%s (%s)", caseLabel,status);
		    nextEntry = nextEntry + 1;
		endif;
	enddo;
	close(HOUSEHOLD_DICT);
	
	// Previous screen
	labels(nextEntry) = "Back";
	codesString(nextEntry) = "Back";
	nextEntry = nextEntry + 1;
	
	// Mark end of array    
	codesString(nextEntry) = "";
end;

// Construit une liste dynamique de choix des individus selon leur categorie
function loadIndividualList(individualType)
	numeric nextEntry = 1;

	// Loop through all cases in listing file
	// to build dynamic value set.
	open(ELIGIBILITE_DICT);
	locate(ELIGIBILITE_DICT,>=,"");
	while loadcase(ELIGIBILITE_DICT) do
	   
	   numeric condition = STATUT_DENOMBREMENT <> 4;
		if previousButton<>notappl and individualType=1 then
			condition = (STATUT_DENOMBREMENT = 1);
		endif;
	   
	   if condition and (STATUT_HANDICAP in individualType,3) 
	   				and (LOGIN=0 or LOGIN=ELIG_AGENT or LOGIN=ELIG_AGENT02) then
		
			codesString(nextEntry)=maketext("%d%02d%02d%03d%03d%03d%02d",ELIG_COMMUNE,ELIG_ZONE,ELIG_COLLINE,ELIG_ZD,
											ELIG_STRUCTURE,ELIG_NUMMENAGE,ELIG_NUMINDIVIDU);
		
			// Get the interview status for the corresponding household
			// from the household questionnaire data file
			string status = getlabel(STATUT_DENOMBREMENT,STATUT_DENOMBREMENT);
		    string form = getlabel(STATUT_HANDICAP_VS1,STATUT_HANDICAP);
		    
		    // Labels have househould number and name of head
		    string caseLabel = maketext("%d-%02d-%02d-%03d-%03d-%03d-%02d",
										 ELIG_COMMUNE,ELIG_ZONE,ELIG_COLLINE, ELIG_ZD, 
										 ELIG_STRUCTURE,ELIG_NUMMENAGE,ELIG_NUMINDIVIDU);
		    labels(nextEntry) = maketext("%s: %s (%s)", caseLabel,strip(form),strip(status));
		    nextEntry = nextEntry + 1;
		endif;
	enddo;
	close(ELIGIBILITE_DICT);
	
	// Previous screen
	labels(nextEntry) = "Back";
	codesString(nextEntry) = "Back";
	nextEntry = nextEntry + 1;
	
	// Mark end of array    
	codesString(nextEntry) = "";
end;


// Display the completion report that shows total interview status
// for all cases in the supervisor's district.
function showCompletionReport()

    string reportFilename = maketext("%sreport.txt", pathname(Application));
    setfile(tempFile, reportFilename);
    
    string varname = maketext("%d",TODAY);
    //errmsg("taille=%d, date=%s, mois=%s",length(varname),varname,varname[5:2]);
    
    filewrite(tempFile, "Rapport d'achévement du %s/%s/%s",varname[7:2],varname[5:2],varname[1:4]);
    filewrite(tempFile, "---------------------------------");
    filewrite(tempFile, "");
    
    if LOGIN=0 then
    	filewrite(tempFile, "     << Superviseur >>");
    else
    	filewrite(tempFile, "     << Agent %d >>",visualvalue(LOGIN));
    endif;
    filewrite(tempFile, "");
    filewrite(tempFile, "Status des interviews");
    filewrite(tempFile, "---------------------");

    numeric completeInterview = 0;
    numeric eligibleHousehold = 0;
    numeric householdWithDisabled = 0;
    numeric refusalEnumeration = 0;
    numeric refusalInterview = 0;
    numeric partialInterview = 0;
    numeric interviewWithIncoherence = 0;
    numeric incoherenceSignaled = 0;
    numeric enumeratedHousehold = 0 ;
    
    open(HOUSEHOLD_DICT);
    locate(HOUSEHOLD_DICT, >=, "");
    while loadcase(HOUSEHOLD_DICT) do
    	if LOGIN=0 or LOGIN=AGENT then
    		
    		completeInterview = completeInterview + (H_STATUT=3);
		    partialInterview = partialInterview + (H_STATUT=2);
		    enumeratedHousehold = enumeratedHousehold + 1;
    	
    		refusalInterview = refusalInterview + (H_STATUT=4);
    		householdWithDisabled = householdWithDisabled + (Q014(3)>0) ;
			do numeric i = 1 while i<= 9
				if(i=2) then
					next;
				endif;
				incoherenceSignaled = incoherenceSignaled + ERREURS_SIGNALEES(i);
	    		if (ERREURS_DETECTEES(i)-ERREURS_JUSTIFIEES(i))>0 then
	        		interviewWithIncoherence = interviewWithIncoherence + 1;
	        		break;
	        	endif;
        	enddo;   
	    endif;
    enddo;
    close(HOUSEHOLD_DICT);
    
    filewrite(tempFile, "Ménage enquêté: %d", completeInterview);
    filewrite(tempFile, "");
    filewrite(tempFile, "Ménage enquêté avec au moins une personne handicapée: %d", householdWithDisabled);
    filewrite(tempFile, "");
    filewrite(tempFile, "Ménage ayant refusé de participer à l'enquête: %d", refusalInterview);
    filewrite(tempFile, "");
    filewrite(tempFile, "Ménage partiellement interviewé: %d", partialInterview);
    filewrite(tempFile, "");
    filewrite(tempFile, "Questionnaire ménage (partiel ou complet) avec des erreurs : %d", interviewWithIncoherence);
    filewrite(tempFile, "");
     filewrite(tempFile, "Nombres d'erreurs signalées : %d", incoherenceSignaled);
    filewrite(tempFile, "");
    filewrite(tempFile, "Total ménage enquêté : %d", enumeratedHousehold);
    
    // Ajout des informations sur les questionnaires individus ici. 
    close(tempFile);
    if getos() in 20:29 then
        // Android - use "view:"
        execsystem(maketext("view:%s", reportFilename));
    else
        // Windows - use "explorer.exe <filename>"
        execsystem(maketext("explorer.exe %s", reportFilename));
    endif;  
end;

// Display the total population report that shows population by sex
// for all cases in the supervisor's district.
function showTotalPopulationReport()

    string reportFilename = maketext("%sreport.txt", pathname(Application));
    setfile(tempFile, reportFilename);

    numeric male = 0;
    numeric female = 0;
    numeric male_PH = 0;
    numeric male_PH_HandicapMajeur = 0;
    numeric male_PH_HandicapMineur = 0;
    numeric male_PH_Possible = 0 ;
    numeric male_PT = 0 ;
    numeric female_PH = 0;
    numeric female_PH_HandicapMajeur = 0;
    numeric female_PH_HandicapMineur = 0;
    numeric female_PH_possible = 0 ;
    numeric female_PT = 0 ;

	// Loop through all households to count male and female 
	open(HOUSEHOLD_DICT);
    locate(HOUSEHOLD_DICT, >=, "");
    while loadcase(HOUSEHOLD_DICT) do 
	    do numeric i = 1 while i <= count(HOUSEHOLD_DICT.MEMBRE )
	    	if LOGIN=0 or LOGIN=AGENT then 
	    		if Q112(i) = 1 then
    				male = male + 1;
    				male_PH = male_PH + (ELIGIBLE(i)=4);
    				male_PH_Possible = male_PH_Possible + (ELIGIBLE(i)=3);
    				male_PH_HandicapMajeur = male_PH_HandicapMajeur + (HANDICAP_MAJEUR(i)>0);
    				male_PH_HandicapMineur = male_PH_HandicapMineur + (HANDICAP_MINEUR(i)>0);
    				male_PT = male_PT + (ELIGIBLE(i)=2);
	    		elseif Q112(i) = 2 then
	    			female = female + 1;
    				female_PH = female_PH + (ELIGIBLE(i)=4);
    				female_PH_Possible = female_PH_Possible + (ELIGIBLE(i)=3);
    				female_PH_HandicapMajeur = female_PH_HandicapMajeur + (HANDICAP_MAJEUR(i)>0);
    				female_PH_HandicapMineur = female_PH_HandicapMineur + (HANDICAP_MINEUR(i)>0);
    				female_PT = female_PT + (ELIGIBLE(i)=2);
	    		endif;
	    	endif;	
	    enddo;
    enddo;
    close(HOUSEHOLD_DICT);
    
    string varname = maketext("%d",TODAY);
    filewrite(tempFile, "Rapport sur l'ensemble de la population %s/%s/%s",varname[7:2],varname[5:2],varname[1:4]);
    filewrite(tempFile, "---------------------------------------------------");
    if LOGIN=0 then
    	filewrite(tempFile, "          << Superviseur >>");
    else
    	filewrite(tempFile, "          << Agent %d >>",visualvalue(LOGIN));
    endif;
    filewrite(tempFile, "Homme: %d", male);
    filewrite(tempFile, "Femme: %d", female);
    filewrite(tempFile, "Total: %d", male + female);
    filewrite(tempFile, "\n---");
    
    filewrite(tempFile, "Homme handicapé: %d", male_PH);
    filewrite(tempFile, "Femme handicapée: %d", female_PH);
    filewrite(tempFile, "Total personne handicapée: %d", male_PH + female_PH);
    filewrite(tempFile, "\n---");
    
    filewrite(tempFile, "Homme atteint d'au moins un handicap majeur: %d", male_PH_HandicapMajeur);
    filewrite(tempFile, "Femme atteinte d'au moins un handicap majeur: %d", female_PH_HandicapMajeur);
    filewrite(tempFile, "Total personne atteinte d'au moins un handicap majeur: %d", 
    		  male_PH_HandicapMajeur + female_PH_HandicapMajeur);
    filewrite(tempFile, "\n---");
    
    filewrite(tempFile, "Homme atteint d'au moins un handicap mineur: %d", male_PH_HandicapMineur);
    filewrite(tempFile, "Femme atteinte d'au moins un handicap mineur: %d", female_PH_HandicapMineur);
    filewrite(tempFile, "Total personne atteinte d'au moins un handicap mineur: %d", 
    		  male_PH_HandicapMineur + female_PH_HandicapMineur);
    filewrite(tempFile, "\n---");
    		  
    filewrite(tempFile, "Homme susceptible d'être atteint d'un handicap: %d", male_PH_Possible);
    filewrite(tempFile, "Femme susceptible d'être atteinte d'un handicap: %d", female_PH_Possible);
    filewrite(tempFile, "Total personne susceptible d'être atteinte d'un handicap: %d", 
    		  male_PH_Possible + female_PH_Possible);
    filewrite(tempFile, "\n---");
    
    filewrite(tempFile, "Potentiel témoin de sexe masculin : %d", male_PT);
    filewrite(tempFile, "Potentiel témoin de sexe féminin : %d", female_PT);
    filewrite(tempFile, "Total de potentiel témoin: %d", male_PT + female_PT);
    
    // Ajouter, depuis la base individu, a chaque strate ci-dessus les ph et temois déjà recensés, 
    // disponibles pour le recensement et ayant refusé l'interview
    
    close(tempFile);
    if getos() in 20:29 then
        // Android - use "view:"
        execsystem(maketext("view:%s", reportFilename));
    else
        // Windows - use "explorer.exe <filename>"
        execsystem(maketext("explorer.exe %s", reportFilename));
    endif;  
end;

// Send data to web server or Dropbox account and download latest application files
function syncWithHeadquarters()

    // Connection au serveur web de l'iford -> Demander a Abraham les bons parametre
	//string cswebServerUrl = "http://192.168.10.103/cspro-rest-api/api"
    //if syncconnect(CSWeb, cswebServerUrl, "syncuser", "password") = 1 then
    
    // Connection au serveur FTP de l<iford
    string ftpServerUrl = "ftp://iford-cm.org/";
    if syncconnect(FTP, ftpServerUrl, "iford-cm", "5Zs;D8!Jd") = 1 then 
	//if syncconnect(Dropbox) = 1 then  
        // Synchronisation de toutes les données de HandiSSR
        syncdata(BOTH, HOUSEHOLD_DICT);
        syncdata(BOTH, ELIGIBILITE_DICT);
        syncdata(BOTH, INDIVIDUAL_DICT);
    
         if accept("[HandiSSR] Souhaitez-vous mettre également à jour l'application de collecte ?","Oui","Non")=1 then 
	         // Mise à jour de tous les programmes de la collecte de HandiSSR
	        syncfile(GET, "/handiSSR/Menu/HandiSSR.pen", "HandiSSR.pen");
	        syncfile(GET, "/handiSSR/Menu/HandiSSR.pff", "HandiSSR.pff");
	       
	        syncfile(GET, "/handiSSR/Household/household.pen","../Household/household.pen");
	        //syncfile(GET, "/handiSSR/Household/household.pff","../Household/household.pff");
	        syncfile(GET, "/handiSSR/Individual/eligibilite.pen","../Individual/eligibilite.pen");
	        //syncfile(GET, "/handiSSR/Individual/eligibilite.pff","../Individual/eligibilite.pff");
	        syncfile(GET, "/handiSSR/Individual/individual.pen","../Individual/individual.pen");
	        //syncfile(GET, "/handiSSR/Individual/individual.pff","../Individual/individual.pff");
        endif;
        syncdisconnect();
    elseif syncconnect(Dropbox) = 1 then  
        // Synchronisation de toutes les données de HandiSSR
        syncdata(BOTH, HOUSEHOLD_DICT);
        syncdata(BOTH, ELIGIBILITE_DICT);
        syncdata(BOTH, INDIVIDUAL_DICT);
    
        if accept("[HandiSSR] Souhaitez-vous mettre également à jour l'application de collecte ?","Oui","Non")=1 then 
	     // Mise à jour de tous les programmes de la collecte de HandiSSR
	        syncfile(GET, "/handiSSR/Menu/HandiSSR.pen", "HandiSSR.pen");
	        syncfile(GET, "/handiSSR/Menu/HandiSSR.pff", "HandiSSR.pff");
	       
	        syncfile(GET, "/handiSSR/Household/household.pen","../Household/household.pen");
	        //syncfile(GET, "/handiSSR/Household/household.pff","../Household/household.pff");
	        syncfile(GET, "/handiSSR/Individual/eligibilite.pen","../Individual/eligibilite.pen");
	        //syncfile(GET, "/handiSSR/Individual/eligibilite.pff","../Individual/eligibilite.pff");
	        syncfile(GET, "/handiSSR/Individual/individual.pen","../Individual/individual.pen");
	        //syncfile(GET, "/handiSSR/Individual/individual.pff","../Individual/individual.pff");
	    endif;
        syncdisconnect();
    endif;
end;

// Send data to supervisor and download latest application files
function syncWithSupervisor()

    if syncconnect(bluetooth) = 1 then
    
        // Synchronisation de toutes les données de HandiSSR
        syncdata(BOTH, HOUSEHOLD_DICT);
        syncdata(BOTH, ELIGIBILITE_DICT);
        syncdata(BOTH, INDIVIDUAL_DICT);
    
        // Mise à jour de tous les programmes de la collecte de HandiSSR
        syncfile(GET, "Menu/HandiSSR.pen", "HandiSSR.pen");
        syncfile(GET, "Menu/HandiSSR.pff", "HandiSSR.pff");
       
        syncfile(GET, "Household/household.pen","../Household/household.pen");
        //syncfile(GET, "Household/household.pff","../Household/household.pff");
        syncfile(GET, "Individual/eligibilite.pen","../Individual/eligibilite.pen");
        //syncfile(GET, "Individual/eligibilite.pff","../Individual/eligibilite.pff");
        syncfile(GET, "Individual/individual.pen","../Individual/individual.pen");
        //syncfile(GET, "Individual/individual.pff","../Individual/individual.pff");
        
        syncdisconnect();
    endif;
end;


// Connect to interviewer tablet for synchronization.
function syncWithInterviewer()
    syncserver(Bluetooth, ".."); //Sauvegarde en dehors du dossier Menu dans le dossier parent HandiSSR
end;

PROC HANDISSR_FF

PROC HANDISSR_QUEST

preproc
TODAY = sysdate("YYYYMMDD");
StartDateValue = tonumber(loadsetting(StartDateKey,sysparm(StartDateKey)));
EndDateValue = tonumber(loadsetting(EndDateKey,sysparm(EndDateKey)));

if TODAY<StartDateValue or TODAY>EndDateValue then
	errmsg("[HandiSSR] Réglez la date et l'heure de votre appareil.");
	stop(0);
elseif TODAY>StartDateValue and TODAY<=EndDateValue then
	savesetting(StartDateKey,maketext("%d",TODAY));
endif;

// Clear previous pffFilenames
{string pffFilename = "../enumeration/enumeration.pff";
if fileexist(pffFilename) then
	filedelete(pffFilename);
endif;

pffFilename = "../household/household.pff";
if fileexist(pffFilename) then
	filedelete(pffFilename);
endif;}
PROC LOGIN

preproc
if loadsetting("login") <> "" then
    LOGIN = tonumber(loadsetting("login"));
else
	string operatorID = "";
	do until operatorID <> ""
		operatorID = prompt("Identifiant agent",numeric);
	enddo;
	LOGIN = tonumber(operatorID);
	setoperatorid(maketext("%d",LOGIN));	
endif;
//noinput;
set attributes ($) protect;

postproc
savesetting("login", maketext("%d", LOGIN));

// Go to the appropriate menu for the role chosen
if LOGIN <> 0 then
    skip to INTERVIEWER_MENU;
else
    skip to SUPERVISOR_MENU;
endif;
PROC INTERVIEWER_MENU

onfocus
// Clear previous entry
$ = notappl;

postproc
// Handle the menu choice
if $ = 1 then
	// Household questionnaire : ajout d'un nouveau menage
	launchHouseholdDataEntry(1);
elseif $ = 2 then
    // Household questionnaire : modification
    skip to CHOOSE_HOUSEHOLD;
elseif $ = 3 then
	// Interview d'une personne handicapée
	launchIndividualDataEntry(1,1);
elseif $ = 4 then
	// Modifier les données d'une personne handicapée
	skip to CHOOSE_PH;
elseif $ = 5 then
	// Interview d'un témoin
	previousButton = 5;	
	skip to CHOOSE_PH;
elseif $ = 6 then
	// Modifier les données d'un témoin
	CHOOSE_PH = ""; 
	skip to CHOOSE_PT;
elseif $ = 7 then
	// Show summary report menu
    skip to SUMMARY_REPORTS;
elseif $=8 then
	// Sync with supervisor
	syncWithSupervisor();
elseif $ = 9 then
    // Logout
    // Clear login from settings
    savesetting("login", "");
    stop(1);
endif;

// Clear previous entry
$ = notappl;

// Show interviewer menu again
reenter;
PROC SUPERVISOR_MENU

onfocus
// Clear previous entry
$ = notappl;

postproc
// Handle the menu choice
if $ = 1 then
    // Show summary report menu
    skip to SUMMARY_REPORTS;
elseif $ = 2 then
	// Sync with headquarters
	syncWithHeadquarters();
elseif $ = 3 then
	// Sync with interviewer
	syncWithInterviewer();
elseif $ = 9 then
    // Logout
    // Clear login from settings
    savesetting("login", "");
    stop(1);
endif;

// Clear previous entry
$ = notappl;

// Return to menu
reenter;
PROC CHOOSE_HOUSEHOLD

onfocus

// Clear previous selection
$ = "";
loadHouseholdList();
setvalueset($, codesString, labels);

postproc
if $ = "Back" then
	if LOGIN <> 0 then
		reenter INTERVIEWER_MENU;
	else
		reenter SUPERVISOR_MENU;
	endif;
else	
	// start up household questionnaire using chosen household
	launchHouseholdDataEntry(2);		
endif;
PROC CHOOSE_PH

onfocus

// Clear previous selection
$ = "";
loadIndividualList(1);
setvalueset($, codesString, labels);

postproc
if $ = "Back" then
	if LOGIN <> 0 then
		reenter INTERVIEWER_MENU;
	else
		reenter SUPERVISOR_MENU;
	endif;
else	
	if previousButton=notappl then
	// start up individual questionnaire using chosen disabled person
		launchIndividualDataEntry(0,1);
	else
		skip to CHOOSE_PT;
	endif;		
endif;
PROC CHOOSE_PT

onfocus
// Clear previous selection
$ = "";
loadIndividualList(2);
setvalueset($, codesString, labels);

postproc
if $ = "Back" then
	if LOGIN <> 0 then
		reenter INTERVIEWER_MENU;
	else
		reenter SUPERVISOR_MENU;
	endif;
else
	if previousButton = notappl then
		// start up individual questionnaire using chosen disabled person
		launchIndividualDataEntry(0,2);
	else
		// start up individual questionnaire using chosen disabled person
		launchIndividualDataEntry(1,2);
	endif;			
endif;
previousButton = notappl;
PROC SUMMARY_REPORTS

// Handle the menu choice
if $ = 1 then
    // Show completion report
    showCompletionReport();
elseif $ = 2 then
    // Show total population report
    showTotalPopulationReport();
else
    // Back
    if LOGIN=0 then
    	reenter SUPERVISOR_MENU;
    else
    	reenter INTERVIEWER_MENU;
    endif;
endif;

// Clear previous entry
$ = notappl;

// Show supervisor menu again
reenter;
