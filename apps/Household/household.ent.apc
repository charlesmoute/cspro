{Application 'HOUSEHOLD' logic file generated by CSPro}
PROC GLOBAL

set explicit ;
string NOM_COMMUNE,infos,namesList = "";
array string householdMembersArray(30, 4);
numeric surveyStartTime,countCheckProgram,codeAgent;//,posMemberForget=0;
file tempfile;


// Recupére le numére le numéro d'index du chef de ménage si il 
// existe, dans le cas contraire retourne 0
function getIdHouseholdHead()
	numeric i,index=0;
	do i=1 while i<=totocc(NOMS_ROSTER)
		if visualvalue(Q113(i))=1 then
			index = i;
			break;
		endif;
	enddo;
	getIdHouseholdHead = index;
end;

// Présente la liste des individus présents dans le ménage et permet à
// l’agent de sélectionner un.
// Retourne 0, si aucun n’a été sélectionner et le numéro d’index de celui qui a été 
// retenu
function pickFromHouseholdRoster()
	// Num. ordre,Nom, Sexe, Lien de parenté, //Eligible
	numeric i;
    do varying i = 1 while i <= totocc(MEMBRE_ROSTER);
        householdMembersArray(i,1) = maketext("%d",visualvalue(Q111(i)));
        householdMembersArray(i,2) = strip(Q110(i));
        householdMembersArray(i,3) = getlabel(Q112, visualvalue(Q112(i)));
		householdMembersArray(i,4) = getlabel(Q113,visualvalue(Q113(i)));
		//householdMembersArray(i,5) = getlabel(ELIGIBLE,visualvalue(ELIGIBLE(i)));		    
    enddo;
    householdMembersArray(i, 1) = ""; // Mark end
    numeric picked = showarray(householdMembersArray, title("Num. ordre","Nom", "Sexe", "Lien de parenté"));
    pickFromHouseholdRoster = picked;
end;

// Permet de naviguer facilement entre les sections du questionnaire
// aller à la section identification, Caractéristiques de l’habitat, Biens de possession,
// Liste des noms ou d’accéder aux informations d’un individu en particulier
function goto()
	numeric index;
    numeric section = accept("Go to?", 
                             "Identification", 
                             "Membres du ménage", 
                             "Caractéristiques individuelles",
                             "Caractéristiques de l’habitation",
                             "Biens possédés");
    if section = 1 then
        move to IDENT_FORM advance;
    elseif section = 2 then
        move to NOMS_ROSTER advance;
    elseif section = 3 then
        index = pickFromHouseholdRoster();
        if index > 0 then
            move to Q112(index) advance;
        endif;
    elseif section = 4 then
        move to HABITAT_FORM advance;		        	
    elseif section = 5 then
        move to BIENS_ROSTER advance;		        			        	
    endif;
end;

// Capture  la localisation géographique du ménage courant en utilisant le GPS
function getGPS()
    gps(open);
	if gps(read, 60) then // Read for up to 60 seconds
    	LATITUDE = gps(latitude);
    	LONGITUDE = gps(longitude);
	else
    	errmsg("[HandiSSR] Signal GPS non disponible");
    	LATITUDE = 99.000000000;
    	LONGITUDE = 99.000000000;
	endif;
	gps(close);
end; 

//Indique si une personne est en âge de se marier
function isPeopleInMarriageableAge(index)
	isPeopleInMarriageableAge = Q116(index)>=12 ;
end;

//indique si une personne est d'âge scolaire
function isPeopleInSchoolingAge(index)
	isPeopleInSchoolingAge = Q116(index)>=6 ;
end;

//Indique si une  personne est âge de travailler
function isPeopleInWorkingAge(index)
	isPeopleInWorkingAge = Q116(index)>=6 ;
end;

// Indique si la valeur en paramétre correspond ou non au fait d'avoir un handicap
function doesNotHaveAnyDifficulties(value)
	doesNotHaveAnyDifficulties = not(value in 2:4);
end;

// indique si une personne est âgée de 15  et plus
function atLeast15Years(index)
	atLeast15Years = Q116(index)>=15; //Q116(index)>=15 and Q116(index)<=49
end;

// Indique si une personne n'est pas éligible(1), est éligible en tant que témoin(2),
// en tant que  possible personne handicapée(3) ou en tant que personne handicapée(4)
function getPeopleStatut(index)
	// Compte du nombre d'handicap majeur et du nombre d'handicap mineur pour l'individu
	HANDICAP_MAJEUR(index)= (Q120B(index) in 3,4 and Q120C(index)=1) + 
							(Q121B(index) in 3,4 and Q121C(index)=1) + 
							(Q122A(index) in 3,4 and Q122B(index)=1) + 
							(Q123A(index) in 3,4 and Q123B(index)=1) +
							(Q124A(index) in 3,4 and Q124B(index)=1) + 
							(Q125A(index) in 3,4 and Q125B(index)=1) +
							(Q126B(index) in 3,4 and Q126C(index)=1) + 
							(Q127A(index) in 3,4 and Q127B(index)=1);
	HANDICAP_MINEUR(index)= (Q120B(index)=2 and Q120C(index)=1) + 
							(Q121B(index)=2 and Q121C(index)=1) + 
							(Q122A(index)=2 and Q122B(index)=1) + 
							(Q123A(index)=2 and Q123B(index)=1) +
							(Q124A(index)=2 and Q124B(index)=1) + 
							(Q125A(index)=2 and Q125B(index)=1) +
							(Q126B(index)=2 and Q126C(index)=1) + 
							(Q127A(index)=2 and Q127B(index)=1);
	numeric elig = 1+(Q116(index)>=15 and Q116(index)<=49);
	if elig=2 then
		elig = elig+2*(HANDICAP_MAJEUR(index)>=1 or HANDICAP_MINEUR(index)>=2);
		if elig<>4 then
			elig = elig+(pos("1",Q128)=0);
		endif;
	endif;
	getPeopleStatut = elig;
end;

// Vérifie si on a un et un seul chef de ménage dans le ménage. 
// Retourne 1 si il existe un et un seul CM et 0 dans le cas contraire
// L'utilisaeur devra onligatoirement sélectionner la personne qui devra être 
// considérée comme chef de ménage.
// indexOfError = 2
function checkHouseholdHeadStatut()
	//checkHouseholdHeadStatut = count(MEMBRE_ROSTER where Q113=1)=1;
	numeric countHouseHoldHead =0, picked=0, idheadHousehold=0;
	do numeric i=1 while i<=totocc(MEMBRE_ROSTER)
		if visualvalue(Q113(i))=1 then
			inc(countHouseHoldHead);
			if idheadHousehold=0 then
				idheadHousehold = i;
			elseif idheadHousehold <> i then
				do until visualvalue(Q113(i)) <> visualvalue(Q113(idheadHousehold))
					inc(ERREURS_SIGNALEES(2));
					errmsg("[HandiSSR] %s et %s sont tous les deux chefs de ménage.",
							strip(Q110(idheadHousehold)), strip(Q110(i)))
						select(maketext("Corriger le lien de parenté de (%d) %s",idheadHousehold,
										 strip(Q110(idheadHousehold))),Q113(idheadHousehold),
							   maketext("Corriger le lien de parenté de (%d) %s",i,
										 strip(Q110(i))),Q113(i));
					//errmsg("boucle do : %d=%s ; %d=%s",idheadHousehold,Q110(idheadHousehold),i,Q110(i));
				enddo;
				if visualvalue(Q113(i)) = 1 then
					idheadHousehold = i;
				endif;
				//errmsg("after if : %d=%s ; %d=%s",idheadHousehold,Q110(idheadHousehold),i,Q110(i));
			endif;
		endif;
	enddo;
	if countHouseHoldHead = 0 then
		do until picked<>0
			inc(ERREURS_SIGNALEES(2));
			errmsg("[HandiSSR] Vous devez avoir un chef de ménage. Sélectionnez en un !");
			picked = pickFromHouseholdRoster();
		enddo;
		Q113(picked)=1;
	endif;
	checkHouseholdHeadStatut = 1;
end;

// Vérifie si le seul de chef ménage se trouve à la position une.
// Retourne 1 si c'est le cas et 0 dans le cas contraire 
// Dans le cas d'un retour d'une valeur nulle on incrémentera le nombre d'erreur
// détecté de un pour non respect des consignes.
function checkHouseholdHeadPosition()
	//checkHouseholdHeadPosition = count(MEMBRE_ROSTER where Q113=1)=1 and seek(Q113=1)=1
	numeric countHouseholdHead = 0 ;
	do numeric i=1 while i<=totocc(MEMBRE_ROSTER)
		if visualvalue(Q113(i))=1 then
			inc(countHouseholdHead);
		endif;
	enddo;
	ERREURS_DETECTEES(2) = ERREURS_DETECTEES(2) + (countHouseholdHead=1 and getIdHouseholdHead()<>1);
	checkHouseholdHeadPosition = 1;
end;

// Vérifie que le chef ménage n'a pas de statut de résidence visiteur
function checkHouseholdHeadResidenceStatut()
	numeric idHouseholdHead = getIdHouseholdHead(),countError,choice;
	countError = visualvalue(Q114(idHouseholdHead))=3;
	if countError then
		inc(ERREURS_SIGNALEES(8));
		choice = errmsg("[HandiSSR] Le statut de résidence du chef de ménage ne peut être visiteur.")
			   		select("Corrigez la valeur du statut de residence",Q114(idHouseholdHead),
			   			   "Ignorez l'avertissement",continue);
		if (choice in 0,2) or (visualvalue(Q114(idHouseholdHead))=3) then
			inc(ERREURS_DETECTEES(8));
		 	string reason;
		 	errmsg("[HandiSSR] Agent %d, pourquoi ignorez vous cet avertissement ? Explicitez le motif.",codeAgent);
			reason = editnote(Q114(idHouseholdHead),getoperatorid());
			if strip(reason)<>"" then
				inc(ERREURS_JUSTIFIEES(8));
			endif;
		endif;
	endif;
	checkHouseholdHeadResidenceStatut = (ERREURS_DETECTEES(8)=ERREURS_JUSTIFIEES(8));
end;

// Vérifie que le chef de ménage a au moins 15 ans.
function checkHouseholdHeadAge()
	numeric countError=0,idHouseholdHead,choice;
	idHouseholdHead = getIdHouseholdHead();
	countError = visualvalue(Q116(idHouseholdHead))<15;
	if countError then
		inc(ERREURS_SIGNALEES(9));
		choice = errmsg("[HandiSSR] L'âge du chef de ménage (%d) devrait être supérieur ou égale à 15 ans.",
			   			 visualvalue(Q116(idHouseholdHead)))
			   			 select("Corrigez la date de naissance",Q115A(idHouseholdHead),
			   					"Corrigez les liens de parenté des membres du ménage",Q113(1),
			   					"Ignorez l'avertissement",continue);
		if (choice in 0,3) or (visualvalue(Q116(idHouseholdHead))<15) then
			inc(ERREURS_DETECTEES(9));
		 	string reason;
		 	errmsg("[HandiSSR] Agent %d, pourquoi ignorez vous cet avertissement ? Explicitez le motif.",codeAgent);
			reason = editnote(Q116(idHouseholdHead),getoperatorid());
			if strip(reason)<>"" then
				inc(ERREURS_JUSTIFIEES(9));
			endif;
		endif;
	endif;
	checkHouseholdHeadAge = (ERREURS_DETECTEES(9)=ERREURS_JUSTIFIEES(9));
end;

// Vérifie que tous les conjoints du CM ont le même statut matrimonial que ce dernier.
// Si le cas retourne 1 sinon retourne 0
// Dans le cas d'un retour d'une valeur nulle, une liste préseentant le CM et ses conjoints
// Num. ordre, Nom, lien de parenté,Statut matrimonial
// Si aucun choix n'est fait on considére que l'erreur est ignoré et demandons la justification
// qui sera affectée au champ de l'erreur. Si un choix est fait l'agent se positionne sur
// l'individu en question pour traiter ces données.
// indexOfError = 3
function checkMaritalStatusSpouses()
	numeric picked, idHouseholdHead = getIdHouseholdHead();
	do numeric i=1 while(i<=totocc(MEMBRE_ROSTER))
		if i<>idHouseholdHead and visualvalue(Q113(i))=2 and 
			visualvalue(Q117(i))<>visualvalue(Q117(idHouseholdHead)) then
			inc(ERREURS_SIGNALEES(3));
			picked= errmsg("[HandiSSR] Le chef de ménage %s de statut matrimonial '%s' doit avoir la même situation matrimoniale que son conjoint %s de statut matrimonial '%s'.",
							strip(Q110(idHouseholdHead)),getlabel(Q117,visualvalue(Q117(idHouseholdHead))),
							strip(Q110(i)),getlabel(Q117,visualvalue(Q117(i))))
							select(maketext("Corrigez le statut matrimonial de %s",Q110(idHouseholdHead)),Q117(idHouseholdHead),
								   maketext("Corrigez le statut matrimonial de %s",Q110(i)),Q117(i),
								   "Ignorez l'avertissement",continue);
			if (picked in 0,3) or (visualvalue(Q117(i))<>visualvalue(Q117(idHouseholdHead))) then
				inc(ERREURS_DETECTEES(3));
			 	string reason;
			 	errmsg("[HandiSSR] Agent %d, pourquoi ignorez vous cet avertissement ? Explicitez le motif.",codeAgent);
				reason = editnote(Q117(i),getoperatorid());
				if strip(reason)<>"" then
					inc(ERREURS_JUSTIFIEES(3));
				endif;
			endif;
		endif;
	enddo;
	checkMaritalStatusSpouses = (ERREURS_DETECTEES(3)=ERREURS_JUSTIFIEES(3));
end;

// Vérifie les conjoints du du chef de ménage ont tous le même sexe et que ce sexe est différent 
// de celui du chef de ménage
// Retourne 1 si la vérification est correct, 0 dans le cas contraire
// L'agent peut ignorer cette erreur. Si il decide de la corriger on lui présente la liste
// des conjoints avec Num ordre, Nom, Sexe, Lien de parenté 
// indexOfError = 4
function checkSexOfSpouses()
	
	numeric i,picked=0,idHouseholdHead=getIdHouseholdHead();
	
    do i = 1 while i <= totocc(MEMBRE_ROSTER);
    	if i<>idHouseholdHead and visualvalue(Q113(i))=2 and 
    		visualvalue(Q112(i))=visualvalue(Q112(idHouseholdHead)) then
			inc(ERREURS_SIGNALEES(4));
			picked= errmsg("[HandiSSR] Le chef de ménage %s de sexe %s devrait être de sexe différent que son conjoint %s.",
							strip(Q110(idHouseholdHead)),getlabel(Q112,visualvalue(Q112(idHouseholdHead))),
							strip(Q110(i)))
						select(maketext("Corrigez le sexe de %s",strip(Q110(idHouseholdHead))),Q112(idHouseholdHead),
						   	   maketext("Corrigez le sexe de %s",strip(Q110(i))),Q112(i),
						   	   "Ignorez l'avertissement", continue);
			if (picked in 0,3) or (visualvalue(Q112(i))=visualvalue(Q112(idHouseholdHead))) then
				inc(ERREURS_DETECTEES(4));
				string reasons;
				errmsg("[HandiSSR] Agent %d, pourquoi ignorez vous cet avertissement ? Explicitez le motif.",codeAgent);
				reasons = editnote(Q112(i),getoperatorid());
				if strip(reasons)<>"" then
					inc(ERREURS_JUSTIFIEES(4));
				endif;	
			endif;
		endif; 
    enddo;
	checkSexOfSpouses = (ERREURS_DETECTEES(4)=ERREURS_JUSTIFIEES(4));
end;

// Fonction appelée pour s'assurer que l'année de naissance n'est pas postérieur à la date de l'enquête
function checkBirthYearCoherence(index)
	numeric choice;
	if Q115B(index)> YEAR then
		inc(ERREURS_SIGNALEES(5));
		errmsg("[HandiSSR] L'année de naissance (%d) ne peut être postérieure à l'année de l'enquête (%d).Vérifiez et corrigez l'information.",
				Q115B(index),YEAR);
		reenter Q115B(index);
	endif;
	checkBirthYearCoherence = 1;
end;

// Vérifie que la date de naissance d'un individu correspond c son âge le jour de la collecte
// Si le mois de naissance n'est pas indiqué, on vérifie l'âge atteint à la date de l'enquête
// Si le mois de naissance est indiqué, on vérifie l'âge en année révolue à la date de l'enquête
// Retourne 1 si les données sont correctes et 0 dans le cas contraire -> message d'erreur à afficher 
// indexOfError = 5
function checkBirthDateCoherence(index)
	numeric agecal = YEAR-Q115B(index)-(Q115A(index)<>98 and Q115A(index)>MONTH),countError,choice;
	countError = (agecal<=90 and agecal<>Q116(index)) or (agecal>90 and Q116(index)<>90) ;
	string msg;
	if agecal>90 and Q116(index)<>90 then
		msg = "Saissir 90 pour les personnes de 90 ans et plus.";
	else
		msg = "Vérifiez l'information.";
	endif;
	
	if countError then
		inc(ERREURS_SIGNALEES(5));
		choice = errmsg("[HandiSSR] L'âge calculé (%d) sur la date de naissaissance(%s %d) ne correspond pas à l'âge déclaré (%d). %s",
			   			agecal,getlabel(Q115A,Q115A(index)),Q115B(index),Q116(index),msg)
			   		select("Corrigez le mois de naissance",Q115A(index),
			   			   "Corrigez l'année de naissance",Q115B(index),
			   			   "Corrigez l'âge déclaré",continue);
		if choice=3 then
			reenter Q116(index);  //Q116(index) = agecal;
		endif;
	endif;
	checkBirthDateCoherence = 1;
end;

// Pour indexOfError=1(6) : la fonction vérifie que la différence d'âge entre le Chef de ménage et
//						 	ses enfants est au moins de 12 ans.
// Pour indexOfError=2(7) : la fonction vérifie que la différence d'âge entre le Chef de ménage et
//						 	ses parents est au moins de 12 ans.
// L'agent peut ignorer cette erreur. Si il decide de la corriger on lui présente la liste
// des enfants ou parents ne respectant pas le critére
function checkAgeDifference()

	numeric picked,idHouseholdHead = getIdHouseholdHead();
	string reasons;
	
	do numeric i=1 while i<=totocc(MEMBRE_ROSTER)
		if i<>idHouseholdHead then
			if visualvalue(Q113(i))=3 and (visualvalue(Q116(idHouseholdHead))-visualvalue(Q116(i)))<12 then
				
				inc(ERREURS_SIGNALEES(6));
				picked = errmsg("[HandiSSR] Le chef de ménage %s d'âge %d et son enfant %s d'âge %d devraient avoir au moins 12 ans d'écart d'âge.",
								strip(Q110(idHouseholdHead)),visualvalue(Q116(idHouseholdHead)), 
								strip(Q110(i)),visualvalue(Q116(i)))
							select("Corrigez l'âge de "+strip(Q110(idHouseholdHead)),Q116(idHouseholdHead),
								   "Corrigez l'âge de "+strip(Q110(i)),Q116(i),
								   "Autre choix ",continue);
				picked = errmsg("[HandiSSR] Le chef de ménage %s d'âge %d et son enfant %s d'âge %d devraient avoir au moins 12 ans d'écart d'âge.",
								strip(Q110(idHouseholdHead)),visualvalue(Q116(idHouseholdHead)), 
								strip(Q110(i)),visualvalue(Q116(i)))
							select("Corrigez le lien de parenté de "+strip(Q110(idHouseholdHead)),Q113(idHouseholdHead),
								   "Corrigez le lien de parenté de "+strip(Q110(i)),Q113(i),
								   "Ignorez l'avertissement",continue);
				if (picked in 0,3) or ((visualvalue(Q116(idHouseholdHead))-visualvalue(Q116(i)))<12) then
					inc(ERREURS_DETECTEES(6));
					errmsg("[HandiSSR] Agent %d, pourquoi ignorez vous cet avertissement ? Explicitez le motif.",codeAgent);
					reasons = editnote(Q116(i),getoperatorid());
					if strip(reasons)<>"" then
						inc(ERREURS_JUSTIFIEES(6));
					endif;	
				endif;
		
			elseif visualvalue(Q113(i))=4 and (visualvalue(Q116(i))-visualvalue(Q116(idHouseholdHead)))<12 then
				inc(ERREURS_SIGNALEES(7));
				string msg = "son père";
				if Q112(i)=2 then
					msg = "sa mère";
				endif;
				picked = errmsg("[HandiSSR] Le chef de ménage %s d'âge %d et %s %s d'âge %d devraient avoir au moins 12 ans d'écart d'âge.",
								strip(Q110(idHouseholdHead)),visualvalue(Q116(idHouseholdHead)),msg, 
								strip(Q110(i)),visualvalue(Q116(i)))
							select("Corrigez l'âge de "+strip(Q110(idHouseholdHead)),Q116(idHouseholdHead),
								   "Corrigez l'âge de "+strip(Q110(i)),Q116(i),
								   "Autre choix ",continue);
				picked = errmsg("[HandiSSR] Le chef de ménage %s d'âge %d et %s %s d'âge %d devraient avoir au moins 12 ans d'écart d'âge.",
								strip(Q110(idHouseholdHead)),visualvalue(Q116(idHouseholdHead)),msg, 
								strip(Q110(i)),visualvalue(Q116(i)))
							select("Corrigez le lien de parenté de "+strip(Q110(idHouseholdHead)),Q113(idHouseholdHead),
								   "Corrigez le lien de parenté de "+strip(Q110(i)),Q113(i),
								   "Ignorez l'avertissement",continue);
				if (picked in 0,3) or ((visualvalue(Q116(i))-visualvalue(Q116(idHouseholdHead)))<12) then
					inc(ERREURS_DETECTEES(7));
					errmsg("[HandiSSR] Agent %d, pourquoi ignorez vous cet avertissement ? Explicitez le motif.",codeAgent);
					reasons = editnote(Q116(i),getoperatorid());
					if strip(reasons)<>"" then
						inc(ERREURS_JUSTIFIEES(7));
					endif;	
				endif;
			endif;
		endif;
	enddo;
	checkAgeDifference = (ERREURS_DETECTEES(6)=ERREURS_JUSTIFIEES(6)) and (ERREURS_DETECTEES(7)=ERREURS_JUSTIFIEES(7));
end;

// Calcule et affecte les valeurs du tableau récapitulatif
function setHouseholdSummary()
	// 1= Homme; 2=Femme; 3=Ensemble
	do numeric i=1 while i<=3
		Q010(i) = 0; // Resident present
		Q011(i) = 0; // Resident absent
		Q012(i) = 0; // Visiteur
		Q013(i) = 0; // Total
		Q014(i) = 0; // Personne handicapee Eligible a la phase handicap
	enddo;
	
	do numeric i=1 while i<= totocc(MEMBRE_ROSTER)
		if visualvalue(Q114(i))=1 then
			inc(Q010(visualvalue(Q112(i))));
		elseif visualvalue(Q114(i))=2 then
			inc(Q011(visualvalue(Q112(i))));
		else
			inc(Q012(visualvalue(Q112(i))));
		endif;
		inc(Q013(visualvalue(Q112(i))));
		inc(Q014(visualvalue(Q112(i))),visualvalue(ELIGIBLE(i))=4);
	enddo;
	
	// Ensemble
	Q010(3) = visualvalue(Q010(1)) + visualvalue(Q010(2));
	Q011(3) = visualvalue(Q011(1)) + visualvalue(Q011(2));
	Q012(3) = visualvalue(Q012(1)) + visualvalue(Q012(2));
	Q013(3) = visualvalue(Q013(1)) + visualvalue(Q013(2));
	Q014(3) = visualvalue(Q014(1)) + visualvalue(Q014(2));
end;

// Présente un résumé rapide de la structure du ménage 
// le nom du chef de ménage, le nombre total de femmes, le nombre total d’hommes, 
// le nombre de ph de sexe masculin, le nombre de ph de sexe féminin
function showHouseholdSummary()
	string headName = "None"; 
	numeric idHouseholdHead = getIdHouseholdHead();
	if idHouseholdHead <> 0 then
		headName = strip(Q110(idHouseholdHead));
	endif;
	
	// Show the summary
	setHouseholdSummary();		
	errmsg("Chef de ménage = %s :: Ensemble des membres = %d :: Femmes = %d :: Hommes = %d :: Eligibles = %d",
		headName, visualvalue(Q013(3)), visualvalue(Q013(2)),visualvalue(Q013(1)),
		visualvalue(Q014(3)));
end;

// Produit et affiche un rapport résumé des  informations du ménage
//Pour les individus : Nom, sex, age, lien de parenté, Eligible
// Pour les ménages : liste des biens de possessions, nombre d’erreur signalée 
function showHouseholdReport()
	numeric i = 1;
	setHouseholdSummary();
    string reportFilename = maketext("%sreport.txt", pathname(Application));
    string varname = maketext("%d",DATE); 
    setfile(tempFile, reportFilename);
    filewrite(tempFile, "Rapport sommaire de ménage du %s/%s/%s",varname[7:2],varname[5:2],varname[1:4]);
    filewrite(tempFile, "--------------------------");
    filewrite(tempFile, "\n");
    filewrite(tempFile, "Commune %s : ZONE %s : Colline %s : ZD %d : Structure %d : Numéro de ménage %d", 
                        getlabel(COMMUNE,visualvalue(COMMUNE)),
                        getlabel(ZONE_VS4,visualvalue(ZONE)),
                        getlabel(COLLINE_VS14,visualvalue(COLLINE)), 
                        visualvalue(ZD), 
                        visualvalue(STRUCTURE), 
                        visualvalue(NUM_MENAGE));
    filewrite(tempFile, "\n");
    filewrite(tempFile, "Membres du ménage:");
    filewrite(tempFile, "");
    filewrite(tempFile, "Nom                            Sexe         Age  Lien de parenté                Eligible");
    filewrite(tempFile, "---                            ----         ---  ---------------                --------");
    
   
    do i = 1 while i <= totocc(MEMBRE_ROSTER)
        filewrite(tempFile, "%-30s %-13s %2d  %-30s %s",
                            Q110(i),
                            getlabel(Q112, visualvalue(Q112(i))),
                            visualvalue(Q116(i)),
                            getlabel(Q113,visualvalue(Q113(i))),
                            getlabel(ELIGIBLE,visualvalue(ELIGIBLE(i))));
    enddo;  
    filewrite(tempFile, "\n\n");
    filewrite(tempFile, "Total: %d    Hommes: %d     Femmes: %d",
	    		visualvalue(Q013(3)), visualvalue(Q013(1)), visualvalue(Q013(2)));
	filewrite(tempFile, "");
    filewrite(tempFile, "Total éligible: %d    Hommes éligibles: %d     Femmes éligibles: %d",
	    		visualvalue(Q014(3)), visualvalue(Q014(1)), visualvalue(Q014(2)));
    filewrite(tempFile, "\n");
    filewrite(tempFile, "Liste des erreurs:");
    filewrite(tempFile, "");
    filewrite(tempFile, "Erreur                                  Nombre détecté");
    filewrite(tempFile, "------                                  --------------");
    
    numeric countError;
    do i = 1 while i <= 9
    	countError = visualvalue(ERREURS_DETECTEES(i)) - visualvalue(ERREURS_JUSTIFIEES(i));
    	if  countError > 0 then
	        filewrite(tempFile, "%-47s %3d",getocclabel(ERREURS_DETECTEES(i)),countError);
	    endif;
    enddo;
    
    close(tempFile);
    if getos() in 20:29 then
        // Android - use "view:"
        execsystem(maketext("view:%s", reportFilename));
    else
        // Windows - use "explorer.exe <filename>"
        execsystem(maketext("explorer.exe %s", reportFilename));
    endif;  
end;

// Affiche le manuel de l’agent enquêteur au format Pdf
function showInterviewerManual()
	if getos() in 20:29 then
        // Android - use "view:"
		execsystem(maketext("view:%sInterviewerManual.pdf", 
				            pathname(Application)));
    else
        // Windows - use "explorer.exe <filename>"
        // Note that with execsystem on Windows need to use \ instead of /
        execsystem(maketext("%sexplorer.exe %sInterviewerManual.pdf", 
                            pathname(Windows),
                            pathname(Application)));
    endif;
end;
 
// Sur changement de la langue on affecte la valeur correspondante à la variable Q100
function OnChangeLanguage() 
	// Pas besoin de la commande ci-dessus car on a pas de valuesets pour le Kirundi
	//setvaluesets(concat("_",getlanguage()));
	Q100 = CAPI_LANG ;
end;

// Retourne au menu du program quand l’utilisateur arrête la procédure de screening.
function OnStop()
	
	{numeric idHouseholdHead = getIdHouseholdHead();
	string caseLabel = maketext("%d-%02d-%03d-%03d-%03d: %s",
							visualvalue(COMMUNE), visualvalue(COLLINE), visualvalue(ZD), 
							visualvalue(STRUCTURE), visualvalue(NUM_MENAGE), strip(Q110(idHouseholdHead)));
	numeric b = setcaselabel(HOUSEHOLD_DICT, caseLabel);
	errmsg("caseLabel = "+caseLabel+" return setcaseLabel value = "+ maketext("%d",b));}

	if ispartial() then
		numeric choice = accept(maketext("[HandiSSR] Agent %d, est-ce un refus du ménage à poursuivre l'interview?",codeAgent),
								"Non","Oui");
		if choice=1 then
			H_STATUT = 2;
		else
			H_STATUT = 4;
		endif;
	{elseif getsymbol()="MEMBER_FORGET" then
		H_STATUT = 3;}
	endif;
	
	{if STATUT_CASE = 1 then
		loadcase(ENUMERATION_DICT,COMMUNE,COLLINE,ZD,STRUCTURE);
		ENUMERATION_DICT.HOUSEHOLD.E_STATUT(NUM_MENAGE) = H_STATUT ;
		writecase(ENUMERATION_DICT);
		close(ENUMERATION_DICT);
	endif;}
    execpff("../Menu/HandiSSR.pff", stop);
end;

PROC Q114
{PROC Q114

preproc
if visualvalue(Q114)=3 and Q113=1 then
	errmsg("[HandiSSR] Le chef de ménage ne peut être un visiteur dans son ménage. Corrigez la valeur saisie!");
	inc(ERREURS_SIGNALEES(8));
	reenter Q114A;
endif;}
PROC HOUSEHOLD_FF
preproc
userbar(clear);
userbar(add button, "Allez à...", goto);
userbar(add button, "Obtenir coordonnées GPS", getGPS);
userbar(add button, "Récapitulatif dénombrement", showHouseholdSummary);
userbar(add button, "Rapport sommaire", showHouseholdReport);
userbar(add button, "Manuel de l'agent", showInterviewerManual);
userbar(add button, "Sauvegarde partielle",do("PartialSave"));
userbar(add button, "Changer la langue",do("ChangeLanguage"));
userbar(add button, "Fin du questionnaire",do("AdvanceToEnd"));

userbar(show);

PROC HOUSEHOLD_QUEST

preproc

// Capture des informations utiles pour la supervision
DATE = sysdate("YYYYMMDD"); //Date du jour de collecte
START_TIME = systime("HHMM"); // Heure de lancement du questionnaire
surveyStartTime = timestamp(); //Heure en secondes pour le calcul de la durée d'administration du questionnaire
DEVICE_ID = getdeviceid(); //adresse mac de l'appareil utilisé pour la collecte ou la saisie des données
// Nom du compte utilisateur sur l'appareil de collecte
TABNAME = getusername(); // Risque d'un nom identique pour les tablettes si utilisation du même compte google
Q100 = CAPI_LANG ;

// Vérification que la date de l'appareil est correct par rapport à la date de création de
// de l'application
string StartDateKey = "StartDate";
numeric StartDateValue = tonumber(loadsetting(StartDateKey,sysparm(StartDateKey)));

if DATE<StartDateValue then
	errmsg("[HandiSSR] Réglez la date et l'heure de votre appareil.");
	stop(0); 
elseif DATE> StartDateValue then
	savesetting(StartDateKey,maketext("%d",DATE));
endif;

// Enregistrement de la date de la première ouverture du questionnaire
if demode()=add then
	START_DATE = sysdate("YYYYMMDD");
	do numeric i=1 while i<= 9
		ERREURS_SIGNALEES(i)=0;
	enddo;
	NB_MEMBER_FORGET = 0;
endif;

// Initialisation des variables de contrôle de cohérence des données
do numeric i=1 while i<= 9
	ERREURS_DETECTEES (i) = 0;
	ERREURS_JUSTIFIEES(i) = 0;
enddo;

// Affectation des noms des membres de ménage comme noms des lignes des rooster qui leur sont associés.
// Cette opération sera visible uniquement lorsque le questionnaire est ouvert en mode modification ou vérification
do numeric i = 1 while i <= totocc(NOMS_ROSTER)
	string name = maketext("%s",strip(Q110(i)));
	setocclabel(MEMBRE_ROSTER(i),name);
enddo;

// Positionnement a la dernière question posée
if ispartial() then
	numeric choice = accept(maketext("[HandiSSR] Voulez-vous aller à la dernière question posée ?"),"Oui","Non");
	if choice=1 then
		move to getsymbol(savepartial) advance;
	endif;
endif;

postproc
if countCheckProgram < 5 then
	choice = accept(maketext("[HandiSSR] Agent %d, estimez-vous avoir correctement administré le questionnaire et avoir corrigé ou justifié les éventuelles erreurs ?",
					codeAgent),"Oui","Non");
	CONFIRMATION = choice; REAFFIRMATION = notappl;
	
	if choice <> 1 then
		choice = accept(maketext("[HandiSSR] Agent %d, souhaitez-vous apporter des corrections au questionnaire ?",
						codeAgent),"Oui","Non");
		if choice=1 then
			goto();
		else
			REAFFIRMATION = 1;
		endif;
	endif;
	
	
else
	CONFIRMATION = 3 ; //Cohérence interne vérifiée par le programme
endif;

// Modification du statut du ménage dans les données de dénombrement
H_STATUT = 3;
{if STATUT_CASE = 1 then
	loadcase(ENUMERATION_DICT,COMMUNE,COLLINE,ZD,STRUCTURE);
	ENUMERATION_DICT.HOUSEHOLD.E_STATUT(NUM_MENAGE) = H_STATUT;
	writecase(ENUMERATION_DICT); // Mise à jour des données
	close(ENUMERATION_DICT); // Fermeture du dictionnaire ouvert dans la section identification
endif;}

if accept(maketext("[HandiSSR] Agent %d, avez-vous des observations sur cet interview ?",codeAgent),"Oui","Non")=1 then
	editnote(HOUSEHOLD_DICT);
endif;

if LATITUDE = 99.000000000 then
	errmsg("[HandiSSR] Agent %d, les coordonnées GPS n’ont pas été enregistrées. Quittez le ménage et cliquez sur ok pour les enregistrer.",codeAgent);
	getGPS();
	if LATITUDE = 99.000000000 then
		errmsg("[HandiSSR] Agent %d, si vous êtes à l’extérieur de la maison, les coordonnées GPS n’ont pas pu être enregistrées. Sinon, sortez du domicile et réssayez",codeAgent);
		do varying numeric  i = 1 until LATITUDE <> 99.000000000 or i>3
			getGPS();
		enddo;
	endif;
endif; 


//errmsg("ERREURS : Signalees = %d, Detectees = %d, Justifiees=%d",ERREURS_SIGNALEES(2),ERREURS_DETECTEES(2),ERREURS_JUSTIFIEES(2));

// Enregistrement de l'heure de fin de l'interview
END_TIME = systime("HHMM");
SURVEY_DURATION = round((timestamp()-surveyStartTime)/60);

// If launched by menu we should stop and return to menu
// here after questionnaire is completed. If not, in add mode
// we will start to add another case instead of going
// back to the menu.
execpff("../Menu/HandiSSR.pff", stop);
PROC IDENT_FORM

PROC AGENT

preproc
string operatorID = "";
if demode()=add then
	if loadsetting("login") <> "" then
    	$ = tonumber(loadsetting("login"));
	else
		do until operatorID <> ""
			operatorID = prompt("Identifiant agent",numeric);
		enddo;
		$ = tonumber(operatorID);
	endif;
	setoperatorid(maketext("%d",$));
else
	if loadsetting("login") <> "" then
    	AGENT02 = tonumber(loadsetting("login"));
	else
		do until operatorID <> ""
			operatorID = prompt("Identifiant agent",numeric);
		enddo;
		AGENT02 = tonumber(operatorID);
	endif;
	setoperatorid(maketext("%d",AGENT02));
endif; 
set attributes ($) protect;
codeAgent = tonumber(getoperatorid());

errmsg("Les informations contenues dans ce document sont confidentielles au terme de la loi statistique n°1/17 du 25 septembre 2007 portant organisation du système statistique du Burundi. En tout état de cause, elles ne peuvent être utilisées à des fins de poursuite ou de répressions fiscales ou pénales sauf pour des cas expressément prévus par la loi. En aucun cas les données individuelles recueillies ne peuvent être utilisées à d’autres fins que celles de diffuser ou de publier des résultats statistiques agrégés");
PROC COMMUNE

preproc
if sysparm("COMMUNE") <> "" then
    $ = tonumber(sysparm("COMMUNE"));
    // protect field so the interviewer cannot modify it
    set attributes ($) protect;
endif;

postproc
NOM_COMMUNE = getlabel($,$);
PROC ZONE

preproc
if sysparm("ZONE") <> "" then
    $ = tonumber(sysparm("ZONE"));
    // protect field so the interviewer cannot modify it
    set attributes ($) protect;
else
	setvalueset(ZONE,maketext("ZONE_VS%d",COMMUNE));
endif;
PROC COLLINE

preproc
if sysparm("COLLINE") <> "" then
    $ = tonumber(sysparm("COLLINE"));
    // protect field so the interviewer cannot modify it
    set attributes ($) protect;
else
	setvalueset(COLLINE,maketext("COLLINE_VS%d",ZONE));
endif;
PROC ZD

preproc
if sysparm("ZD") <> "" then
    $ = tonumber(sysparm("ZD"));
    // protect field so the interviewer cannot modify it
    set attributes ($) protect;
endif;
PROC STRUCTURE

preproc
if sysparm("STRUCTURE") <> "" then
    $ = tonumber(sysparm("STRUCTURE"));
    // protect field so the interviewer cannot modify it
    set attributes ($) protect;
endif;
PROC NUM_MENAGE

preproc
if sysparm("NUM_MENAGE") <> "" then
    $ = tonumber(sysparm("NUM_MENAGE"));
    // protect field so the interviewer cannot modify it
    set attributes ($) protect;
endif;
PROC COORDONNEE_GPS

onfocus
if visualvalue(LATITUDE) <> notappl and visualvalue(LATITUDE) <> 99 then
	//and visualvalue(LONGITUDE) <> notappl and visualvalue(LONGITUDE) <> 99
	setvalueset(COORDONNEE_GPS, COORDONNEE_GPS_VS2);
else
	setvalueset(COORDONNEE_GPS, COORDONNEE_GPS_VS1);
endif;

postproc
if $=1 then
	getGPS();
	reenter;
elseif $ = 2 then
	// Keep GPS - move to next field
elseif $ = 9 then
	// No GPS, remove the existing one by
	// replacing with 99 (unread).
	LATITUDE = 99.000000000;
	LONGITUDE = 99.000000000;
endif;
PROC Q101

preproc
savepartial();

postproc
if $ = 6 then // other (specify)
	//Q101A = prompt(maketext("[HandiSSR] spécifiez l'%s :",getlabel(Q102A)),Q102A,UpperCase);
	
	 string msg = strip(Q101A);
	 msg = prompt("[HandiSSR] spécifiez l'"+tolower(getlabel(Q101A))+" :",msg,UpperCase);
	 Q101A = strip(msg);
else
	Q101A = "";
endif;
PROC Q102

postproc
//errmsg("Valeur de Q102A avant prompt = %s",Q102A);
if $ = 10 then // other (specify)
	//Q102A = prompt(maketext("[HandiSSR] spécifiez l'%s :",getlabel(Q102A)),Q102A,UpperCase);
	
	 string msg = strip(Q102A);
	 msg = prompt("[HandiSSR] spécifiez l'"+tolower(getlabel(Q102A))+" :",msg,UpperCase);
	 Q102A = strip(msg);
	 
	{putnote(strip(Q102A),Q102A);
	Q102A = strip(toupper(editnote(Q102A)));}
else
	Q102A = "";
endif;
//errmsg("Valeur de Q102A apres prompt = %s",Q102A);
PROC Q103

postproc
if $ = 12 then // other (specify)
  //Q103A = toupper(prompt(maketext("[HandiSSR] spécifiez l'%s :",getlabel(Q103A)),Q103A));
  
   string msg = strip(Q103A);
   msg = prompt("[HandiSSR] spécifiez l'"+tolower(getlabel(Q103A))+" :",msg,UpperCase);
   Q103A = strip(msg);
  
  {putnote(strip(Q103A),Q103A);
  Q103A = strip(toupper(editnote(Q103A)));}
else
	Q103A = "";
endif;
PROC Q104

postproc
if $ = 10 then // other (specify)
   string msg = strip(Q104A);
   msg = prompt("[HandiSSR] spécifiez l'"+tolower(getlabel(Q104A))+" :",msg,UpperCase);
   Q104A = strip(msg);
else
	Q104A = "";
endif;
PROC Q105

postproc
if $ = 13 then // other (specify)
   string msg = strip(Q105A);
   msg = prompt("[HandiSSR] spécifiez l'"+tolower(getlabel(Q105A))+" :",msg,UpperCase);
   Q105A = strip(msg);
else
	Q105A = "";
endif;
PROC Q106

postproc
if $ = 7 then // other (specify)
   string msg = strip(Q106A);
   msg = prompt("[HandiSSR] spécifiez l'"+tolower(getlabel(Q106A))+" :",msg,UpperCase);
   Q106A = strip(msg);
else
	Q106A = "";
endif;
PROC Q107

postproc
if $ = 6 then // other (specify)
  //Q107A = toupper(prompt(maketext("[HandiSSR] spécifiez l'%s :",getlabel(Q107A)),Q107A));
  
   string msg = strip(Q107A);
   msg = prompt("[HandiSSR] spécifiez l'"+tolower(getlabel(Q107A))+" :",msg,UpperCase);
   Q107A = strip(msg);
  
  {putnote(strip(Q107A),Q107A);
  Q107A = strip(toupper(editnote(Q107A)));}
else
	Q107A = "";
endif;
PROC Q108

postproc
if $ = 10 then // other (specify)
  //Q108A = toupper(prompt(maketext("[HandiSSR] spécifiez l'%s :",getlabel(Q108A)),Q108A));
  
  string msg = strip(Q108A);
  msg = prompt("[HandiSSR] spécifiez l'"+tolower(getlabel(Q108A))+" :",msg,UpperCase);
  Q108A = strip(msg);
  
  {putnote(strip(Q108A),Q108A);
  Q108A = strip(toupper(editnote(Q108A)));}
else
	Q108A = "";
endif;
PROC MEMBRE_FORM

preproc
errmsg("Nous voudrions maintenant, des renseignements sur les personnes qui vivent dans votre ménage.");

postproc
setHouseholdSummary();

// Vérification et traitement le cas échéant des erreurs commises pendant l'administration du questionnaire
countCheckProgram = 0 ;
checkHouseholdHeadStatut();
checkHouseholdHeadPosition();
if count(MEMBRE_ROSTER where Q113=1)>=1 then
	inc(countCheckProgram,checkHouseholdHeadAge());
	countCheckProgram = countCheckProgram + checkHouseholdHeadResidenceStatut();
	countCheckProgram = countCheckProgram + checkMaritalStatusSpouses();
	countCheckProgram = countCheckProgram + checkSexOfSpouses();
endif;
countCheckProgram = countCheckProgram + checkAgeDifference();

// Attribution d'un nom facilement lisible pour un questionnaire ménage
{numeric idHouseholdHead = seek(Q113=1);
string caseLabel = maketext("%d-%02d-%03d-%03d-%03d: %s",
						COMMUNE, COLLINE, ZD, STRUCTURE, NUM_MENAGE, strip(Q110(idHouseholdHead)));
errmsg("caseLabel = "+caseLabel+" idHouseholdHead = "+ maketext("%d",idHouseholdHead)+" getIdHouseholdHead="+
	   maketext("%d",getIdHouseholdHead()));
setcaselabel(HOUSEHOLD_DICT, caseLabel);}
PROC Q111

preproc
$ = curocc();
PROC Q110

PostProc
if strip($) = "" then
	errmsg("[HandiSSR] Agent %d, vous devez saisir un nom",codeAgent);
	reenter;
endif;
$ = strip($);
PROC MEMBRE_SUPPL

onfocus
if visualvalue(MEMBER_FORGET)=1 then
	MEMBRE_SUPPL=1;
endif;

postproc
if MEMBRE_SUPPL=2 then
	MEMBER_FORGET = notappl;
	endgroup;
elseif visualvalue(MEMBER_FORGET)=1 then
	MEMBER_FORGET = notappl;
	savesetting("currentPosition",maketext("%d",curocc()+1));
endif;
PROC TAILLE_MENAGE

preproc
$ = totocc(NOMS_ROSTER);
savepartial();

namesList = "";
do varying numeric i =1 until i>totocc(NOMS_ROSTER)
	namesList = namesList + strip(Q110(i));
	if i<totocc(NOMS_ROSTER) then
		namesList = namesList + ", ";
	endif;
enddo;
//errmsg("%s",namesList);
PROC MEMBRE_ROSTER

preproc
if loadsetting("currentPosition") <> "" then
	numeric currentPosition = tonumber(loadsetting("currentPosition"));
	inc(NB_MEMBER_FORGET,TAILLE_MENAGE-currentPosition+1);
	if currentPosition<=TAILLE_MENAGE then
		move to Q112(currentPosition) advance;
	endif;

endif;
PROC Q112

preproc
string currentPosition = loadsetting("currentPosition");
if currentPosition <> "" and tonumber(currentPosition)=curocc() then
	savesetting("currentPosition","");
endif;
PROC Q113

postproc
numeric choice,posvalue;
{if $ = 1 then
	string caseLabel = maketext("%d-%02d-%03d-%03d-%03d: %s",
								COMMUNE, COLLINE, ZD, STRUCTURE, NUM_MENAGE, strip(Q110(curocc())));
	setcaselabel(HOUSEHOLD_DICT, caseLabel);
endif;}

posvalue = curocc();
if posvalue=1 and Q113<> 1 then
	inc(ERREURS_SIGNALEES(2));
	choice = errmsg("[HandiSSR] Le premier membre du ménage devrait être le chef de ménage.")
			   			 select(maketext("Corrigez le lien de parenté de %s",Q110(posvalue)),Q113(posvalue),
			   					"Modifiez le nom du membre du ménage",Q110(posvalue));
	//reenter;
endif;

if posvalue<>1 and Q113=1 then
	inc(ERREURS_SIGNALEES(2));
	choice = errmsg("[HandiSSR] Vous ne pouvez avoir plus d'un chef de ménage dans un même ménage.")
			   			 select(maketext("Corrigez le lien de parenté de %s",Q110(posvalue)),Q113(posvalue),
			   					"Modifiez le nom du membre du ménage",Q110(posvalue));
	//reenter;
endif;

numeric idHouseholdHead = seek(Q113=1);
if idHouseholdHead<>0 then
	string headName = strip(Q110(idHouseholdHead));
	string caseLabel = maketext("%d-%02d-%03d-%03d-%03d: %s",
								COMMUNE, COLLINE, ZD, STRUCTURE, NUM_MENAGE,headName);
	setcaselabel(HOUSEHOLD_DICT, caseLabel);
endif;
PROC Q114A

postproc
if $=1 then
	skip to Q114c ;
endif;
PROC Q114B

postproc
if $ = 2 then
	Q114 = 3;
	if Q113=1 then
		errmsg("[HandiSSR] Le chef de ménage ne peut être un visiteur dans son ménage. Corrigez le statut de residence.");
		inc(ERREURS_SIGNALEES(8));
		reenter Q114A;
	endif;
	skip to Q115A;
else
	skip to Q114c;
endif;
PROC Q114C

postproc
Q114 = Q114C;
PROC Q115A

preproc
if Q114=3 then
	numeric index = curocc();
	if index<totocc(NOMS_ROSTER) then
		skip to next Q112;
	else
		skip to MEMBER_FORGET;
	endif;
endif;
PROC Q115B

postproc
checkBirthYearCoherence(curocc());
PROC Q116

postproc
checkBirthDateCoherence(curocc());
PROC Q117

preproc
if not isPeopleInMarriageableAge(curocc()) then
	skip to Q118;
endif;
PROC Q118

preproc
if not isPeopleInSchoolingAge(curocc()) then
	skip to Q119;
endif;
PROC Q119

preproc
if not isPeopleInWorkingAge(curocc()) then
	skip to Q120A;
endif;
PROC Q120A

preproc
if not atLeast15Years(curocc()) then
	if curocc()< totocc(NOMS_ROSTER) then
		skip to next Q112;
	else
		skip to MEMBER_FORGET;
	endif
endif;

string name = strip(Q110(curocc()));
if Q100=1 then
	errmsg("Je voudrais maintenant vous poser des questions concernant les difficultés que peuvent rencontrer les personnes dans leurs activités quotidiennes/tous les jours et si vous avez (ou %s a) des difficultés à les faire. SVP, dites-moi si vous n’avez pas compris la question, je vous la répéterai et j’expliquerai.",name);
else
	errmsg("Ubu naho, nagira ndababaze ko, hari abantu bafise ingorane zijanye n’akazi kaminsi yose. Ndabasavye mudatahuye ibibazo mubimbwire, ndabisubiremwo, nongere ndabisigure.");
endif;

PROC Q120B

postproc
if doesNotHaveAnyDifficulties($) then
	//skip to Q121A;
	skip to Q120D;
endif;
PROC Q120D
preproc
infos = tolower(getlabel(Q120B));

{if Q114=2 then
	$=3;
	move to Q121A advance;
endif;}
PROC Q121A


PROC Q121B

postproc
if doesNotHaveAnyDifficulties($) then
	skip to Q121D;//Q122A;
endif;
PROC Q121D
preproc
infos = tolower(getlabel(Q121B));

{if Q114=2 then
	$=3;
	move to Q122A advance;
endif;}
PROC Q122A

postproc
if doesNotHaveAnyDifficulties($) then
	skip to Q122C;//Q123A;
endif;
PROC Q122C
preproc
infos = tolower(getlabel(Q122A));

{if Q114=2 then
	$=3;
	move to Q123A advance;
endif;}
PROC Q123A

postproc
if doesNotHaveAnyDifficulties($) then
	skip to Q123C;//Q124A;
endif;
PROC Q123C

preproc
infos = tolower(getlabel(Q123A));

{if Q114=2 then
	$=3;
	move to Q124A advance;
endif;}
PROC Q124A

postproc
if doesNotHaveAnyDifficulties($) then
	skip to Q124C;//Q125A;
endif;
PROC Q124C

preproc
infos = tolower(getlabel(Q124A));

{if Q114=2 then
	$=3;
	move to Q125A advance;
endif;}
PROC Q125A

postproc
if doesNotHaveAnyDifficulties($) then
	skip to Q125C; //Q126A;
endif;
PROC Q125C

preproc
infos = tolower(getlabel(Q125A));

{if Q114=2 then
	$=3;
	move to Q126A advance;
endif;}
PROC Q126B

postproc
if doesNotHaveAnyDifficulties($) then
	skip to  Q126D; //Q127A;
endif;
PROC Q126D

preproc
infos = tolower(getlabel(Q126B));

{if Q114=2 then
	$=3;
	move to Q127A advance;
endif;}
PROC Q127A

postproc
if doesNotHaveAnyDifficulties($) then
	skip to  Q127C; //Q128;
endif;
PROC Q127C

preproc
infos = tolower(getlabel(Q127A));

{if Q114=2 then
	$=3;
	move to Q128 advance;
endif;}
PROC Q128

postproc
if pos("1",$)<>0 then
	string correctValue = "",value="";
	do numeric i=2 while i<=9
		value = maketext("%d",i);
		if pos(value,$) <> 0 then
			correctValue = correctValue + value;
		endif;
	enddo;
	if(correctValue="")then
		correctValue="1";
	endif;
	$ = correctValue;
endif;

//errmsg("[postproc Q128] posMemberForget="+maketext("%d",posMemberForget)+", curocc="+maketext("%d",curocc()));
numeric idx = curocc();
if loadsetting("currentPosition")="" and idx>=1 and idx<=totocc(NOMS_ROSTER) then
	if pos("9",$) <> 0 then // other (specify)
	  
	  string msg = strip(Q128B(idx));
	  msg = prompt("[HandiSSR] spécifiez l'"+tolower(getlabel(Q128B))+" :",msg,UpperCase);
	  Q128B(idx) = strip(msg);
	
	  {putnote(strip(Q128B(curocc())),Q128B(curocc()));
	  Q128B(curocc()) = strip(toupper(editnote(Q128B(curocc()))));
	  errmsg("after - edit note Q128B = %s", strip(Q128B(idx)));}
	else
		Q128B(idx) = "";
	endif;
endif;

do numeric i=1 while i<=9
	if pos(maketext("%d",i),$) <> 0 then
		Q128A(i) = 1;
	else
		Q128A(i) = 2;
	endif;
enddo;
PROC Q128C

preproc
infos = tolower(getlabel(Q128));

{if Q114=2 then
	$=3;
	move to Q129 advance;
endif;}
PROC Q129

preproc
ELIGIBLE(curocc()) = getPeopleStatut(curocc());

if demode()=add then
	STATUT_INDIVIDU(curocc()) = 1; 
endif;

postproc
if curocc()=totocc(NOMS_ROSTER) then
	{do numeric i=totocc() while i>TAILLE_MENAGE by(-1)
		delete(MEMBRE_ROSTER(i));
	enddo;}
	move to MEMBER_FORGET advance;
endif;
savepartial();
PROC MEMBER_FORGET

postproc
if MEMBER_FORGET=1 then
	//inc(NB_MEMBER_FORGET);
	//posMemberForget = totocc(NOMS_ROSTER)+1;
	//savesetting("currentPosition",totocc(NOMS_ROSTER)+1);
	move to MEMBRE_SUPPL(totocc(NOMS_ROSTER)) advance ;
endif;
